# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '15.1'
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'skiniorna' do
  rn_config = use_native_modules!   # Renamed to avoid collision

  # Enable modular headers for Firebase and Google dependencies
  use_modular_headers!

  use_react_native!(
    :path => rn_config[:reactNativePath],
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :hermes_enabled => true,        # Enable Hermes
    :fabric_enabled => false        # Keep new architecture OFF until stable
  )

  post_install do |installer|
    # Keep rn_config (do NOT shadow it)
    react_native_post_install(
      installer,
      rn_config[:reactNativePath],  # Use correct variable
      :mac_catalyst_enabled => false
    )

    # Build settings tweaks
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |build_config|  # Different variable name
        build_config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        # Additional fixes for iOS 18.2 compatibility
        build_config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        build_config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES' if build_config.name == 'Debug'
      end
    end

    # Fix for Xcode 16 and iOS 18.2 compatibility
    installer.generated_projects.each do |project|
      project.targets.each do |target|
        target.build_configurations.each do |build_config|
          build_config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          unless build_config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('RCT_NEW_ARCH_ENABLED=0')
            build_config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_NEW_ARCH_ENABLED=0'
          end
        end
      end
    end

    # Defensive fix: remove duplicate React modulemap that can cause "Redefinition of module 'react_runtime'".
    # This file is generated by some pods and can conflict with React's own modulemap.
    duplicate_modulemap = File.join(installer.sandbox.root, 'Headers', 'Public', 'react_runtime', 'React-jsitooling.modulemap')
    # Ensure the modulemap exists but with a unique module name to avoid redefinition of 'react_runtime'.
    # Use a non-umbrella module declaration so the compiler doesn't complain
    # that another umbrella already covers this directory. Using `header` here
    # avoids creating an umbrella for the directory while still providing a
    # named module that prevents missing-file errors from referencing code.
    # Minimal stub modulemap: declare a named module but do not create an umbrella
    # or reference headers. This prevents both redefinition and "umbrella already
    # covers this directory" issues while keeping the file present so the
    # compiler doesn't error on a missing path.
    safe_content = <<~MODULEMAP
      module react_runtime_jsitooling {
        export *
      }
    MODULEMAP

    begin
      FileUtils.mkdir_p(File.dirname(duplicate_modulemap)) unless Dir.exist?(File.dirname(duplicate_modulemap))
      File.write(duplicate_modulemap, safe_content)
      Pod::UI.puts "Wrote safe modulemap to: #{duplicate_modulemap}"
    rescue => e
      Pod::UI.warn "Failed to write safe modulemap: #{e.message}"
    end
  end
end
