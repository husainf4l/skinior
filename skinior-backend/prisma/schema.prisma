// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String?
  lastName  String?
  avatar    String?

  // Authentication fields
  password     String? // Optional for OAuth users
  googleId     String? @unique
  appleId      String? @unique
  firebaseUid  String? @unique // Firebase Auth UID
  refreshToken String?

  // Password reset fields
  resetToken       String? @unique
  resetTokenExpiry DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  devices              Device[]
  notifications        Notification[]
  notificationSettings NotificationSettings?
  subscriptions        Subscription[]
  subscriptionUsage    SubscriptionUsage[]

  @@map("users")
}

model Waitlist {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String?
  lastName  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}

model Device {
  id          String   @id @default(cuid())
  userId      String
  deviceToken String
  platform    String   // 'ios' or 'android'
  appVersion  String?
  deviceModel String?
  osVersion   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceToken])
  @@map("devices")
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  title   String
  body    String
  data    Json?    // Additional data for deep linking/navigation
  read    Boolean  @default(false)
  sentAt  DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt(sort: Desc)])
  @@map("notifications")
}

model NotificationSettings {
  userId                String @id
  skinAnalysisComplete  Boolean @default(true)
  chatMessages          Boolean @default(true)
  reminders             Boolean @default(true)
  marketing             Boolean @default(false)
  pushEnabled           Boolean @default(true)
  emailEnabled          Boolean @default(false)
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// Subscription Plans
model SubscriptionPlan {
  id          String @id @default(cuid())
  name        String
  description String?
  features    Json   // Array of features
  
  // Pricing
  monthlyPrice  Decimal @db.Decimal(10, 2)
  yearlyPrice   Decimal @db.Decimal(10, 2)
  
  // Platform-specific identifiers
  stripeMonthlyPriceId String? // Stripe price ID for monthly
  stripeYearlyPriceId  String? // Stripe price ID for yearly
  appleMonthlyProductId String? // Apple App Store monthly product ID
  appleYearlyProductId  String? // Apple App Store yearly product ID
  googleMonthlyProductId String? // Google Play monthly product ID
  googleYearlyProductId  String? // Google Play yearly product ID
  
  // Plan settings
  maxAnalysesPerMonth Int? // null = unlimited
  maxStorageGB        Int? // null = unlimited
  aiChatEnabled       Boolean @default(false)
  prioritySupport     Boolean @default(false)
  
  // Status
  isActive Boolean @default(true)
  sortOrder Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subscriptions Subscription[]
  
  @@map("subscription_plans")
}

// User Subscriptions
model Subscription {
  id     String @id @default(cuid())
  userId String
  planId String
  
  // Subscription details
  status SubscriptionStatus @default(PENDING)
  billingCycle BillingCycle
  
  // Platform and payment info
  platform PaymentPlatform
  platformSubscriptionId String? // Stripe subscription ID, Apple transaction ID, etc.
  platformCustomerId String? // Stripe customer ID
  
  // Pricing info (stored for historical purposes)
  amount   Decimal @db.Decimal(10, 2)
  currency String @default("USD")
  
  // Subscription periods
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt          DateTime?
  canceledAt        DateTime?
  
  // Trial info
  trialStart DateTime?
  trialEnd   DateTime?
  
  // Payment info
  lastPaymentAt DateTime?
  nextPaymentAt DateTime?
  
  // Metadata
  metadata Json? // Platform-specific data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]
  
  @@unique([userId, platform]) // One active subscription per platform per user
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

// Payment Records
model Payment {
  id             String @id @default(cuid())
  subscriptionId String
  
  // Payment details
  amount         Decimal @db.Decimal(10, 2)
  currency       String
  status         PaymentStatus
  
  // Platform info
  platform              PaymentPlatform
  platformPaymentId     String // Stripe payment intent ID, Apple transaction ID, etc.
  platformTransactionId String?
  
  // Payment method
  paymentMethod String? // card, apple_pay, google_pay, etc.
  
  // Timestamps
  paidAt    DateTime?
  failedAt  DateTime?
  refundedAt DateTime?
  
  // Metadata
  metadata Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([paidAt])
  @@map("payments")
}

// Subscription Usage Tracking
model SubscriptionUsage {
  id     String @id @default(cuid())
  userId String
  
  // Usage period
  periodStart DateTime
  periodEnd   DateTime
  
  // Usage counters
  analysesUsed    Int @default(0)
  storageUsedGB   Decimal @default(0) @db.Decimal(10, 2)
  chatMessagesUsed Int @default(0)
  
  // Metadata
  metadata Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, periodStart, periodEnd])
  @@index([periodStart, periodEnd])
  @@map("subscription_usage")
}

// Enums
enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIALING
  PAUSED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentPlatform {
  STRIPE
  APPLE_APP_STORE
  GOOGLE_PLAY_STORE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

// Enums (keeping minimal set)
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}
